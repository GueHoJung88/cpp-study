#1 다형성
#include<iostream>
#include<string>

using namespace std;

double calculate(double a, double b) {
	return a * b;
}

double calculate(double a, double b, double c) {
	return a * b * c;
}

int main()
{
	double x, y, z, answer;
	char select;

	cout << "길이 x값을 입력하십시오.: ";
	cin >> x;
	cout << "너비 y값을 입력하십시오.: ";
	cin >> y;
	cout << "높이 z값을 입력하십시오.: ";
	cin >> z;
	cout << "직사각형의 넓이를 구하려면 s를, 직육면체의 부피를 구하려면 v를 입력하십시오.: ";
	cin >> select;

	switch (select) {
		case 's':
		{
			answer = calculate(x, y);
			cout << "x와 y로 구한 넓이는 " << answer << "입니다." << endl;
			break;
		}
		case 'v':
		{
			answer = calculate(x, y, z);
			cout << "x와 y와 z로 구한 넓이는 " << answer << "입니다." << endl;
			break;
		}
		default:
		{
			cout << "잘못 입력했습니다." << endl;
		}

	}

	return 0;
}




#2 배열 호출 시 arr[]와 크기를 나타내는 별도의 문자를 따로 불러야 하는 이유
#include<iostream>
using namespace std;

const int n = 5;

void printArray(int arr[n]);

int main() {
	int test_array[5] = {1, 2, 3, 4, 5};
	int a = 5;

	int test_array2[4] = { 1, 2, 3, 4 };
	int test_array3[6] = { 1, 2, 3, 4, 5, 6 };

	printArray(test_array);
	printArray(test_array2);
	printArray(test_array3);
}

void printArray(int arr[n]) {
	for (int i = 0; i < n; i++) {
		cout << arr[i] << " ";
	}
	cout << endl;
}


#3 const와 일반의 할당 관계

#include<iostream>

using namespace std;

int main() {
	const float g_earth = 9.80;
	const float* pe = &g_earth;

	cout << pe;

	const float g_moon = 1.63;
	float* pm = &g_moon;

	return 0;
}

#4 - c 스타일 문자열

#include<iostream>

using namespace std;

int main() {
	
	const char* str = "gallumping";
	const char str2 = "gallumping";
	char str3[] = "galloping";



	return 0;
}